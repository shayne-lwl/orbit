# This configuration will be used when running in Docker

# Notice we're using 'postgres-db' as the hostname
# This will be the name of our PostgreSQL service in Docker Compose
spring.datasource.url=jdbc:postgresql://postgres-db:5432/orbit
spring.datasource.username=${DB_USERNAME:postgres}
spring.datasource.password=${DB_PASSWORD:mysecretpassword}

# Important: Tell Spring to wait if the database isn't ready yet
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.datasource.hikari.initialization-fail-timeout=60000

# Make sure your app listens on all interfaces, not just localhost
# Setting it to server.addreess = 0.0.0.0 means "listen on all network interfaces," making your application accessible to other containers.
server.address=0.0.0.0
server.port=8080


# Email Configuration

# Tells Spring Boot application where to find Gmail's outgoing server
spring.mail.host = smtp.gmail.com 
# 587 IS Gmail's designated entrance for secure email submission from external applications. 
spring.mail.port = 587
spring.mail.username = orbit.organization.team@gmail.com
spring.mail.password = ipki zcqy lzcd jqaq
# Instruct the application to provide credentials when connecting to Gmail. Without this enabled, the application would attempt
# to send emails anonymously, which Gmail's servers would reject for security reasons. 
spring.mail.properties.mail.smtp.auth = true
# Enables Transport Layer Security encryption for the connection between your application and Gmail's server
spring.mail.properties.mail.smtp.starttls.enable = true