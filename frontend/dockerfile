FROM node:20-alpine AS deps

# Set the working directory inside the container to `/app`.
# All subsequent commands will run from this directory.
WORKDIR /app

COPY package.json package-lock.json ./ 

# Execute the `npm install` command to download and install
# all dependencies listed in your package files.
RUN npm install

FROM node:20-alpine AS builder
WORKDIR /app

# Copy the `node_modules` folder from the previous `deps` stage.
# This reuses the cached layer from Stage 1.
COPY --from=deps /app/node_modules ./node_modules

# Copy the rest of your application's source code (components, pages, etc.)
# from your local machine into the container.
COPY . .
RUN npm run build

FROM node:20-alpine AS runner
WORKDIR /app

# Set the Node.js environment variable to `production`.
# This tells Next.js to run in its optimized production mode.
# ENV NODE_ENV=production

# ENV HOSTNAME 0.0.0.0

RUN adduser --system --uid 1001 nextjs

COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json
COPY --from=builder /app/public ./public

USER nextjs

# Informs Docker that the container listens on port 3000 at runtime.
EXPOSE 3000

# Tells the Next.js server to listen on all network interfaces inside the container,
# making it accessible from outside
ENV HOSTNAME 0.0.0.0

CMD ["npm", "start"]
